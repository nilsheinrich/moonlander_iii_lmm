---
title: "Nils Wendel Heinrich: Close Fixations"
subtitle: "Moonlander III - Analysis"
author: "Nils Wendel Heinrich"
date: "2024-06-17"
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 2
    code-fold: false
    number-sections: true
    fig-width: 8
    fig-height: 6
editor_options:
  chunk_output_type: console
jupyter: julia-1.9
---

# Description
2 Covariates (continuous variables we believe affect the predicted variable) - N_visible_obstacles & input noise

# Setup

## Packages

```{julia}
#| label: packages

using Arrow
using AlgebraOfGraphics
using CairoMakie
using DataFrames
using DataFrameMacros
using MixedModels
using MixedModelsMakie
using Random
#using RCall

CairoMakie.activate!(; type="svg");
```

```{julia}
#| label: constants
const RNG = MersenneTwister(36)
N_iterations = 10000

const AoG = AlgebraOfGraphics;
```

# Modeling fixation duration

## Code book
Possible random effects: only **ID** (the subject itself).

```{julia}
#| label: data

my_data = DataFrame(Arrow.Table("data/Experiment3_CloseFixations_short.arrow"))
my_data = dropmissing(my_data, [:N_visible_obstacles])

# Filtering fixations with duration less than 25 samples
# fixdur >= 0.0125
my_data = my_data[(my_data.fixation_duration .>= 0.0125), :]

describe(my_data)
```

### Contrasts

We will declare **ID** as a grouping variable as well as define the effects coding for the discrete covariate input noise.

#### Hypothesis Coding
```{julia}

my_cake = Dict(
  :ID => Grouping(),
  :input_noise => HypothesisCoding(
    [
      -1 +1 0 0 0
      0 -1 +1 0 0
      0 0 -1 +1 0
      0 0 0 -1 +1
    ];
    levels=[0.0, 0.5, 1.0, 1.5, 2.0],
    labels=["0.5", "1.0", "1.5", "2.0"],
  ),
);

```

# Modeling fixation duration

## Building various models

### Only varying intercept LMM

```{julia}
#| label: m_varyingInt1

m_varyingInt1 = let
    varInt = @formula(log(fixation_duration) ~ 1 + N_visible_obstacles + input_noise + (1 | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingInt1)
VarCorr(m_varyingInt1)
```

### Exploring random effects structure of the model
 We start by building the most complex random effects structure around **ID** (just dumping all of the fixed effects in the varying slope). Including the interaction effect

```{julia}
#| label: m_varyingSlope_complex

m_varyingSlope_complex = let
    varSlop = @formula(log(fixation_duration) ~ 1 + N_visible_obstacles + input_noise + (1 + N_visible_obstacles + input_noise | ID));
    fit(MixedModel, varSlop, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_complex)  # Overparameterized
```
The model is singular.

#### Models of less complexity

Stating zerocorr
```{julia}
#| label: m_varyingSlope_complex_zc

m_varyingSlope_complex_zc = let
    varSlop = @formula(log(fixation_duration) ~ 1 + N_visible_obstacles + input_noise 
    + zerocorr(1 + N_visible_obstacles + input_noise | ID));
    fit(MixedModel, varSlop, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_complex_zc)  # NOT overparameterized
```

Throwing input noise out of the random effects structure of the model.
```{julia}
#| label: m_varyingSlope1

m_varyingSlope1 = let
    varSlop = @formula(log(fixation_duration) ~ 1 + N_visible_obstacles + input_noise 
    + zerocorr(1 + N_visible_obstacles | ID));
    fit(MixedModel, varSlop, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope1)  # NOT overparameterized
```

```{julia}

gof_summary = let
  nms = [:m_varyingSlope1, :m_varyingSlope_complex_zc]
  mods = eval.(nms)
  lrt = MixedModels.likelihoodratiotest(m_varyingSlope1, m_varyingSlope_complex_zc)
  DataFrame(;
    name = nms, 
    dof=dof.(mods),
    deviance=round.(deviance.(mods), digits=0),
    AIC=round.(aic.(mods),digits=0),
    AICc=round.(aicc.(mods),digits=0),
    BIC=round.(bic.(mods),digits=0),
    χ²=vcat(:., round.(lrt.tests.deviancediff, digits=0)),
    χ²_dof=vcat(:., round.(lrt.tests.dofdiff, digits=0)),
    pvalue=vcat(:., round.(lrt.tests.pvalues, digits=3))
  )
end

```
m_varyingSlope1 is favored by BIC (and AIC). Will proceed with that one.

Throwing out N_visible_obstacles.
```{julia}
#| label: m_varyingSlope2

m_varyingSlope2 = let
    varSlop = @formula(log(fixation_duration) ~ 1 + N_visible_obstacles + input_noise + zerocorr(1 + input_noise | ID));
    fit(MixedModel, varSlop, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope2)  # NOT overparameterized
```

```{julia}

gof_summary = let
  nms = [:m_varyingSlope2, :m_varyingSlope_complex_zc]
  mods = eval.(nms)
  lrt = MixedModels.likelihoodratiotest(m_varyingSlope2, m_varyingSlope_complex_zc)
  DataFrame(;
    name = nms, 
    dof=dof.(mods),
    deviance=round.(deviance.(mods), digits=0),
    AIC=round.(aic.(mods),digits=0),
    AICc=round.(aicc.(mods),digits=0),
    BIC=round.(bic.(mods),digits=0),
    χ²=vcat(:., round.(lrt.tests.deviancediff, digits=0)),
    χ²_dof=vcat(:., round.(lrt.tests.dofdiff, digits=0)),
    pvalue=vcat(:., round.(lrt.tests.pvalues, digits=3))
  )
end

```
Referring to BIC, varyingSlope2 is ahead ever so slightly (1 point in BIC).

### Model selection
Finally taking a look at the main effects within the final model:
```{julia}
#| label: selected model

m_varyingSlope2 = let
    varSlop = @formula(log(fixation_duration) ~ 1 + N_visible_obstacles + input_noise + zerocorr(1 + input_noise | ID));
    fit(MixedModel, varSlop, my_data; contrasts=my_cake);
  end

m_varyingSlope2

```

Due to zerocorr, no valuable information (but for the sake of completion):
```{julia}

MixedModels.PCA(m_varyingSlope2)

```

## Caterpillar plot
We can visually verify having stated zero correlation between random effects.
```{julia}
#| fig-cap1: Prediction intervals on subject random effects for model m_varyingSlope_complex
#| label: fig-cm_varyingSlope
#|
cm_varyingSlope = first(ranefinfo(m_varyingSlope2));
caterpillar!(Figure(; resolution=(800, 1200)), cm_varyingSlope; orderby=1)
```

## Shrinkage plot

```{julia}
#| code-fold: true
#| label: fig-shrinkage
#|
#| fig-cap: Shrinkage plots of the subject random effects in the chosen model
shrinkageplot!(Figure(; resolution=(1000, 1200)), m_varyingSlope2)

```
We see a few data points which are aggressively adjusted. Here is where strength was borrowed from somewhere else and applied to adjust the linear trends of these individual data points.

## Bootstrapping

```{julia}
samples = parametricbootstrap(RNG, N_iterations, m_varyingSlope2)
tbl = samples.tbl
```

### Plotting

Let's first take a look into the bounds
```{julia}
confint(samples)
```

Now let's plot the bounds (without intercept) to visualize when 0 is within the bounds (meaning no significance). It's basically the plot above for the beta estimates but every estimate gets its own row, which makes it easier to read.
```{julia}
ridgeplot(samples; show_intercept=false, xlabel="Bootstrap density and 95%CI", title="Fixation duration (close fixations)")
```

Main effects:
─────────────────────────────────────────────────────────────
                           Coef.  Std. Error      z  Pr(>|z|)
─────────────────────────────────────────────────────────────
(Intercept)          -1.70293     0.411105    -4.14    <1e-04
N_visible_obstacles   0.00343872  0.00281963   1.22    0.2226
input_noise: 0.5     -0.0864906   0.0604432   -1.43    0.1524
input_noise: 1.0     -0.0792858   0.135079    -0.59    0.5572
input_noise: 1.5      0.236991    0.135751     1.75    0.0808
input_noise: 2.0     -0.163307    0.0804964   -2.03    0.0425
─────────────────────────────────────────────────────────────

CIs:
 β2  │ -0.00212557  0.00896377
 β3  │ -0.208267    0.0305545
 β4  │ -0.346461    0.185952
 β5  │ -0.0404047   0.492531
 β6  │ -0.318524    -0.0021715

# Modeling fixation location

## Modeling fixation location (in terms of distance to spaceship)

```{julia}
#| label: m_varyingInt1

m_varyingInt1 = let
    varInt = @formula(√(distance_to_spaceship) ~ 1 + N_visible_obstacles + input_noise + (1 | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingInt1) # NOT overparameterized

```
We're good to go now.

## Building various models with varying slope

starting with the most complex model.
```{julia}
#| label: m_varyingSlope_complex

m_varyingSlope_complex = let
    varSlope = @formula(√(distance_to_spaceship) ~ 1 + N_visible_obstacles + input_noise + (1 + N_visible_obstacles + input_noise | ID));
    fit(MixedModel, varSlope, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_complex) # Overparameterized
```

### Models of reduced complexity
Neglecting all correlations between random effects.
```{julia}
#| label: m_varyingSlope_complex_zc

m_varyingSlope_complex_zc = let
    varSlope = @formula(√(distance_to_spaceship) ~ 1 + N_visible_obstacles + input_noise 
    + zerocorr(1 + N_visible_obstacles + input_noise | ID));
    fit(MixedModel, varSlope, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_complex_zc) # NOT overparameterized
```

#### Throwing out random effect terms

Leaving out input noise:
```{julia}
#| label: m_varyingSlope1

m_varyingSlope1 = let
    varSlope = @formula(√(distance_to_spaceship) ~ 1 + N_visible_obstacles + input_noise 
    + zerocorr(1 + N_visible_obstacles | ID));
    fit(MixedModel, varSlope, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope1) # NOT overparameterized

```

```{julia}

gof_summary = let
  nms = [:m_varyingSlope1, :m_varyingSlope_complex_zc]
  mods = eval.(nms)
  lrt = MixedModels.likelihoodratiotest(m_varyingSlope1, m_varyingSlope_complex_zc)
  DataFrame(;
    name = nms, 
    dof=dof.(mods),
    deviance=round.(deviance.(mods), digits=0),
    AIC=round.(aic.(mods),digits=0),
    AICc=round.(aicc.(mods),digits=0),
    BIC=round.(bic.(mods),digits=0),
    χ²=vcat(:., round.(lrt.tests.deviancediff, digits=0)),
    χ²_dof=vcat(:., round.(lrt.tests.dofdiff, digits=0)),
    pvalue=vcat(:., round.(lrt.tests.pvalues, digits=3))
  )
end

```
m_varyingSlope1 is favored by BIC. Proceeding with m_varyingSlope1.

Leaving out N_visible_obstacles instead:
```{julia}
#| label: m_varyingSlope2

m_varyingSlope2 = let
    varSlope = @formula(√(distance_to_spaceship) ~ 1 + N_visible_obstacles + input_noise 
    + zerocorr(1 + input_noise | ID));
    fit(MixedModel, varSlope, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope2) # NOT overparameterized

```

```{julia}

gof_summary = let
  nms = [:m_varyingSlope2, :m_varyingSlope1]
  mods = eval.(nms)
  lrt = MixedModels.likelihoodratiotest(m_varyingSlope2, m_varyingSlope1)
  DataFrame(;
    name = nms, 
    dof=dof.(mods),
    deviance=round.(deviance.(mods), digits=0),
    AIC=round.(aic.(mods),digits=0),
    AICc=round.(aicc.(mods),digits=0),
    BIC=round.(bic.(mods),digits=0),
    χ²=vcat(:., round.(lrt.tests.deviancediff, digits=0)),
    χ²_dof=vcat(:., round.(lrt.tests.dofdiff, digits=0)),
    pvalue=vcat(:., round.(lrt.tests.pvalues, digits=3))
  )
end

```
m_varyingSlope1 is favored.

## Model selection
Finally taking a look at the main effects within the selected model:

```{julia}
#| label: m_varyingSlope1

m_varyingSlope1 = let
    varSlope = @formula(sqrt(distance_to_spaceship) ~ 1 + N_visible_obstacles + input_noise 
    + zerocorr(1 + N_visible_obstacles | ID));
    fit(MixedModel, varSlope, my_data; contrasts=my_cake);
  end

m_varyingSlope1
```

```{julia}
VarCorr(m_varyingSlope1)
```

Omitting PCA due to having stated zerocorr...

## Bootstrapping

```{julia}
samples = parametricbootstrap(RNG, N_iterations, m_varyingSlope1)
tbl = samples.tbl
```

```{julia}
confint(samples)
```

### Plotting
The ridgeplot will show us the estimates and their distributions (as plotted above). We will omit the intercept because it would zoom out too much.
```{julia}
ridgeplot(samples; show_intercept=false, xlabel="Bootstrap density and 95%CI", title="Distance to agent (close fixations)")
```

Main effects:
N_visible_obstacles   0.0130597   0.0030702   4.25    <1e-04
input_noise: 0.5      0.0350746   0.0156453   2.24    0.0250
input_noise: 1.0     -0.0760162   0.01575    -4.83    <1e-05
input_noise: 1.5      0.0978971   0.0153844   6.36    <1e-09
input_noise: 2.0     -0.10084     0.0146067  -6.90    <1e-11

CIs:
 β2  │ 0.00673267  0.0189182
 β3  │ 0.00399053  0.0663377
 β4  │ -0.105465   -0.0446926
 β5  │ 0.0666501   0.126786
 β6  │ -0.130502   -0.0724793
